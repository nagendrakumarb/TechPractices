@page "/"
@inject IPizzaStore Store
@inject OrderState OrderState
@inject NavigationManager UriHelper
@implements IDisposable

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <PizzaSpecialCard PizzaSpecial="special" OnClick="@(() => OrderState.ShowConfigurePizzaDialog(special))" />
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count == 0)" @onclick="( ( )=> PlaceOrder() )">
            Order >
        </button>
    </div>
</div>

<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    <ConfigurePizzaDialog 
        Pizza="OrderState.ConfiguringPizza" 
        OnCancel="OrderState.CancelConfigurePizzaDialog" 
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog"  />
</TemplatedDialog>

@code {
    [CascadingParameter] UserStateProvider UserState { get; set; }

    List<PizzaSpecial> specials;

    protected async override Task OnInitializedAsync ()
    {
        OrderState.StateChanged += OnOrderStateChanged;
        specials = await Store.GetSpecials();
    }

    void OnOrderStateChanged(object sender, EventArgs e) => StateHasChanged();

    async Task PlaceOrder()
    {
        // The server will reject the submission if you're not signed in, so attempt
        // to sign in first if needed
        if (await UserState.TrySignInAsync())
        {
            await Store.PlaceOrder(OrderState.Order, UserState.CurrentUser?.DisplayName);
            OrderState.ResetOrder();
            UriHelper.NavigateTo("myorders");
        }
    }

    void IDisposable.Dispose()
    {
        OrderState.StateChanged -= OnOrderStateChanged;
    }
}
